<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django on Note To Self</title>
    <link>knightebsuku.github.io/tags/django/</link>
    <description>Recent content in django on Note To Self</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jan 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="knightebsuku.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL Console for Django Admin</title>
      <link>knightebsuku.github.io/blog/sqlconsole/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>knightebsuku.github.io/blog/sqlconsole/</guid>
      <description>From time to time when working on django project I tend to need to write out some sql queries to either check something out, update records or to write out the sql version of the ORM. On ocassions there is no direct acces to the database, so having a sql console within the django app might be a good idea.
I decided to write a small django app that does this.</description>
    </item>
    
    <item>
      <title>Homepage for your Django API</title>
      <link>knightebsuku.github.io/blog/django_api_homepage/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>knightebsuku.github.io/blog/django_api_homepage/</guid>
      <description>I created an api for a django application of mine amalisidi and I wanted to create a basic homepage for the api. Reading up on the documentation did not really give me a clear picture as to how I would go about it, so I&amp;rsquo;m documenting it here to save my future self.
First lets add the api&amp;rsquo;s homepage url, in the main urls.py file
from rest_framework.documentation import include_docs_urls then under urlpatterns</description>
    </item>
    
    <item>
      <title>Archiving My Receipts</title>
      <link>knightebsuku.github.io/blog/amalisidi/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>knightebsuku.github.io/blog/amalisidi/</guid>
      <description>For the longest time I&amp;rsquo;ve been meaning to better manage my plastic bags of receipts, finally got around to build an application to archive my receipts and to keep track of my expenses. Its a very simple application and hopefully down the line I&amp;rsquo;ll be able do do some analysis on the data I generate.
Check out the project here</description>
    </item>
    
    <item>
      <title>CSS Frameworks Take You Far</title>
      <link>knightebsuku.github.io/blog/django_bulma/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>knightebsuku.github.io/blog/django_bulma/</guid>
      <description>I&amp;rsquo;m a big fan of css frameworks, since I mainly work on backend applications, have a framework to build out the UI for me is great.
I&amp;rsquo;m okay with the phrase Every website looks like bootstrap, if bootstrap, or any other framework, can get the product out the door and into the hands of users.
I came across a framwork called Bulma which has very simple stying and no javascript. I quickly realased that if you are not building complex or interactive UI&amp;rsquo;s this framework is great.</description>
    </item>
    
    <item>
      <title>Concept - Django project as a debian package</title>
      <link>knightebsuku.github.io/blog/django_debian_package/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>knightebsuku.github.io/blog/django_debian_package/</guid>
      <description>Concept - Django project as a debian package For the past couple of months I&amp;rsquo;ve been pondering whether it would be possible to package a full django project as debian package (.deb).
Now and then I tend to write small web applications that run on my machine and use the SQLite database. On one occasion somebody asked if they could run the application on their machine.
These small web applications tend to just use Django, Django Rest Framework, JavaScript(eg: jquery) and a CSS framework that does not need to be customised or built and on some occasions a background task like celery.</description>
    </item>
    
  </channel>
</rss>